generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  categories Category[] @relation("StoreToCategory")
  products   Product[]  @relation("StoreToProduct")
  sizes      Size[]     @relation("StoreToSize")
  orders     Order[]    @relation("StoreToOrder")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id          String          @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store           @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String // Foreign Key to Category
  category    Category        @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String
  price       Decimal
  isFeatured  Boolean         @default(false)
  isArchived  Boolean         @default(false)
  images      Image[] // Relation to Image model
  orderItems  OrderItem[] // Relation to Order model
  sizes       Product_Sizes[] // Relation to Product_Sizes model
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Product_Sizes {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id])
  sizeId    String // Foreign Key to Size
  size      Size     @relation(fields: [sizeId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([sizeId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String          @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store           @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product_Sizes[] // Relation to Product_Sizes model
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
